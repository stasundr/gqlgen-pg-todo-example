package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.43

import (
	"context"

	"github.com/stasundr/gqlgen-pg-todo-example/dataloaders"
	"github.com/stasundr/gqlgen-pg-todo-example/graph/model"
	"github.com/vikstrous/dataloadgen"
)

// Todo is the resolver for the todo field.
func (r *queryResolver) Todo(ctx context.Context, id int) (*model.Todo, error) {
	todo := model.Todo{ID: id}

	if err := r.DB.NewSelect().Model(&todo).Where("id = ?", id).Scan(ctx); err != nil {
		return nil, err
	}

	return &todo, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context, limit *int, offset *int) ([]*model.Todo, error) {
	var todos []*model.Todo

	query := r.DB.NewSelect().Model(&todos)
	if limit != nil {
		query = query.Limit(*limit)
	}
	if offset != nil {
		query = query.Offset(*offset)
	}

	if err := query.Scan(ctx); err != nil {
		return nil, err
	}

	return todos, nil
}

// CreatedBy is the resolver for the createdBy field.
func (r *todoResolver) CreatedBy(ctx context.Context, obj *model.Todo) (*model.User, error) {
	return ctx.Value(dataloaders.UserLoader).(*dataloadgen.Loader[int, *model.User]).Load(ctx, obj.CreatedBy)
}

// UpdatedBy is the resolver for the updatedBy field.
func (r *todoResolver) UpdatedBy(ctx context.Context, obj *model.Todo) (*model.User, error) {
	return ctx.Value(dataloaders.UserLoader).(*dataloadgen.Loader[int, *model.User]).Load(ctx, obj.UpdatedBy)
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
